61414050 丹羽直也

課題1
1. "Thread A"、"Thread B"の出力が、ある程度連続して切り替わりながら出力された。
Thread A 23行、Thread B 15行、Thread A 32行…
のように行数はまちまちである。

2. 3つ (mainスレッドと作ったスレッド2つ)

3.
変数のscopeはその変数が、ソースコード上のどこから参照できるのかを示す語である。
その形態はプログラミング言語によって様々であり、例えばC言語のグローバル変数は
プリプロセス後に同一のファイルになる範囲で参照可能であるが、ブロック内で宣言される
ローカル変数はそのブロックの内側でのみ参照可能である。
言語によってはスレッドローカルと言った、スレッド毎に参照可能といったものもある。
変数のextentはその変数が、時間的にどの範囲で参照可能かを示す語である。
こちらもプログラミング言語によって様々であり、C言語のグローバル変数はプログラムが実行中
いつでも参照できるが、ローカル変数はそのブロックに入ってから出るまでしか参照できない。
(すなわち、ローカル変数へのポインタをブロックの外まで保持し続けていると想定してない挙動をする)
一方、GC(ガーベージコレクション)を持っていることを前提としたJavaScriptなどでは、
参照が保持されている間がextentという言語もある。

課題2
1. "Thread (0)"、"Thread (1)"の出力が、ある程度連続して切り替わりながら出力された。
課題1-1と同様にその行数はまちまちであった。

2.
#include <stdio.h>
#include <pthread.h>

void *thread(void *arg)
{
  for (;;)
    printf("Thread (%f)\n", *(double*)arg);
  return NULL;
}

int main()
{
  pthread_t a, b;
  double arg_a = 3.14, arg_b = 2.71;

  pthread_create(&a, NULL, thread, &arg_a);
  pthread_create(&b, NULL, thread, &arg_b);

  pthread_join(a, NULL);
  pthread_join(b, NULL);

  return 0;
}

3.
#include <stdio.h>
#include <pthread.h>

void *thread(void *arg)
{
  for (;;)
    printf("Thread (%s)\n", (char*)arg);
  return NULL;
}

int main()
{
  pthread_t a, b;
  char *arg_a = "I am a boy", *arg_b = "I am a girl";

  pthread_create(&a, NULL, thread, arg_a);
  pthread_create(&b, NULL, thread, arg_b);

  pthread_join(a, NULL);
  pthread_join(b, NULL);

  return 0;
}

4.
pthread_joinに渡す値が異なっており、そのままではすぐ終了してしまう。おそらく20行目は
pthread_join(t[i], NULL);
のつもりだったと推測。
その修正を施して実行したところ、1つだけ
Thread (1)
が実行された後、ずっと
Thread (0)
が出力され続けた。 thread 関数にpthread_create経由で渡したのは、main内のi変数へのポインタであり、
pthread_createの直後、17行目で2個目のスレッドを立てている間は1、そのループを抜ける時には2となっている。
タイミング的にその瞬間でthread内のprintfが実行されたらその値が出る。
タイミング次第では2が出ることもあり得るし、いきなり0になる可能性もあるがそれはOS次第である。
19行目のループ内、20行目の thread_join で1つ目のスレッドの終了を待っている間は、for内の1つめの初期化部で
iが0に初期化されており、どちらのスレッドでも0が表示される。どちらのスレッドも無限ループなので、
pthread_joinが返ってくることはなく、外から終了させるまでずっと0が表示される。

課題3
1.
実行するたびに値が異なる。
count = -728
が出たり
count = 0
が出たり
count = 445
が出たりする。
Cent OS 7 x86_64での結果。
(なお、何故かWindows 10のBash on Windowsの環境だと何度実行しても0である…。)

課題4
1.
#include <stdio.h>
#include <pthread.h>

static int count = 0;
static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void *threadA(void *arg)
{
  int i;
  int tmp;

  for (i = 0; i < 1000; i++) {
    pthread_mutex_lock(&mutex);
    tmp = count;
    tmp = tmp + 1;
    count = tmp;
    pthread_mutex_unlock(&mutex);
  }

  return NULL;
}

void *threadB(void *arg)
{
  int i;
  int tmp;

  for (i = 0; i < 1000; i++) {
    pthread_mutex_lock(&mutex);
    tmp = count;
    tmp = tmp - 1;
    count = tmp;
    pthread_mutex_unlock(&mutex);
  }

  return NULL;
}


int main()
{
  pthread_t a, b;

  pthread_create(&a, NULL, threadA, NULL);
  pthread_create(&b, NULL, threadB, NULL);

  pthread_join(a, NULL);
  pthread_join(b, NULL);

  printf("count = %d\n", count);

  return 0;
}

このコードにより数回実行してすべて
count = 0
が出力されるようになった。

課題5
1.
int pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);

2.
#include <stdio.h>
#include <pthread.h>

#define N 5

int buffer[N];
int inptr = 0, outptr = 0;
int count = 0;

pthread_cond_t full = PTHREAD_COND_INITIALIZER;
pthread_cond_t empty = PTHREAD_COND_INITIALIZER;
pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;

static int sum = 0;

int produce()
{
  static c = 1;
  return c > 1000 ? -1: c++;
}

void consume(int data)
{
  sum += data;
}

void *producer(void *arg)
{
  int data;
  for (;;) {
    data = produce();
    if (data < 0)
      break;
    pthread_mutex_lock(&lock);
    while (count >= N) pthread_cond_wait(&full, &lock);
    count = count + 1;
    buffer[inptr] = data;
    inptr = (inptr + 1) % N;
    pthread_mutex_unlock(&lock);
    pthread_cond_signal(&empty);
  }
}

void *consumer(void *arg)
{
  int data;
  for (;;) {
    pthread_mutex_lock(&lock);
    while (count == 0) pthread_cond_wait(&empty, &lock);
    count = count - 1;
    data = buffer[outptr];
    outptr = (outptr + 1) % N;
    pthread_mutex_unlock(&lock);
    pthread_cond_signal(&full);
    consume(data);
    if (data == 1000)
      break;
  }
}

int main()
{
  pthread_t p, c;

  pthread_create(&p, NULL, producer, NULL);
  pthread_create(&c, NULL, consumer, NULL);

  pthread_join(p, NULL);
  pthread_join(c, NULL);

  printf("sum = %d\n", sum);
  return 0;
}

実際に動かせるようにするために追加でmain関数を作り、
producerとconsumerをpthreadで取り扱えるようにした上で、終了条件を追加した。

3.


