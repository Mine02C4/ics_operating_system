学籍番号 61414050
丹羽直也 にわなおや

課題 1

$ ps u
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
ua001968 19282  0.0  0.0 112112  2064 pts/0    Ss   20:30   0:00 -bash
ua001968 19338  0.0  0.0 109688  1116 pts/0    R+   20:30   0:00 ps u

自分が使ってるシェル: bash
そのプロセスID: 19282

課題 2

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
  printf("pid: %d\n", getpid());
  printf("ppid: %d\n", getppid());
  return 0;
}

出力結果
pid: 23945
ppid: 23666


課題 3

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
  int pid;
  if ((pid = fork()) != 0) {
    printf("parent: pid = %d, ppid = %d\n", getpid(), getppid());
  } else {
    printf("child: pid = %d, ppid = %d\n", getpid(), getppid());
  }
  return 0;
}


出力結果
parent: pid = 24136, ppid = 23666
child: pid = 24137, ppid = 24136

課題 4

"ls" を実行するプログラム

#include <unistd.h>

int main()
{
  char *eargv[] = { "ls", NULL };
  execvp(eargv[0], eargv);
  return 0;
}


実行結果
a.out  p2.c  p3.c  p4-1.c  report.txt

"ls -l" を実行するプログラム

#include <unistd.h>

int main()
{
  char *eargv[] = { "ls", "-l", NULL };
  execvp(eargv[0], eargv);
  return 0;
}

実行結果
合計 48
-rwxr-xr-x 1 ua001968 users 6450 11月  8 15:16 2016 a.out
-rw-r--r-- 1 ua001968 users  159 11月  8 14:47 2016 p2.c
-rw-r--r-- 1 ua001968 users  277 11月  8 15:02 2016 p3.c
-rw-r--r-- 1 ua001968 users  110 11月  8 15:16 2016 p4-1.c
-rw-r--r-- 1 ua001968 users  116 11月  8 15:16 2016 p4-2.c
-rw-r--r-- 1 ua001968 users  333 11月  8 14:44 2016 report.txt

課題 5

#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define MAX_LINE 256

void getargs(char*, int, int*, char**);
const char *getenv(const char *[], const char *);

int
main(const int margc, const char *margv[], const char *menvp[])
{
  char line[MAX_LINE];
  while (1) {
    printf("%% ");
    fflush(stdout);
    if (fgets(line, MAX_LINE, stdin) == NULL) {
      fprintf(stderr, "Input error when fgets.\n");
      return 1;
    }
    int argc;
    char *argv[MAX_LINE];
    getargs(line, MAX_LINE, &argc, argv);
    if (argc == 0) {
      continue;
    }
    if (strcmp(argv[0], "cd") == 0) {
      if (argc > 1) {
        chdir(argv[1]);
      } else {
        const char *home = getenv(menvp, "HOME");
        printf("%s\n", home);
        chdir(home);
      }
      continue;
    }
    if (strcmp(argv[0], "exit") == 0) {
      return 0;
    }
    int background = 0;
    if (argv[argc - 1][strlen(argv[argc - 1]) - 1] == '&') {
      background = 1;
      if (strlen(argv[argc - 1]) == 1) {
        argv[argc - 1] = NULL;
      } else {
        argv[argc - 1][strlen(argv[argc - 1]) - 1] = '\0';
        argv[argc] = NULL;
      }
    } else {
      argv[argc] = NULL;
    }
    int pid;
    if ((pid = fork()) != 0) {
      if (background == 0) {
        int status;
        wait(&status);
      }
    } else {
      execvp(argv[0], argv);
    }
  }
  return 0;
}

char *skipcs = " \n\t";

void
getargs(char *input, int max, int *argc, char *argv[])
{
  int i;
  *argc = 0;
  int npos = 0, prev_skip = 1;
  for (i = 0; i < max; i++) {
    if (input[i] == '\0') {
      if (prev_skip == 0) {
        argv[(*argc)++] = input + npos;
      }
      break;
    }
    int skip = 0, j;
    for (j = 0; skipcs[j] != '\0'; j++) {
      if (input[i] == skipcs[j]) {
        skip = 1;
        break;
      }
    }
    if (skip != 0 && prev_skip == 0) {
      argv[(*argc)++] = input + npos;
      input[i] = '\0';
    } else if (skip == 0 && prev_skip != 0) {
      npos = i;
    }
    prev_skip = skip;
  }
}

const char *
getenv(const char *envp[], const char *key)
{
  int i, j;
  for (i = 0; envp[i] != NULL; i++) {
    const char *val = NULL;
    int n = 0;
    for (j = 0; envp[j] != '\0'; j++) {
      if (envp[i][j] == '=') {
        val = &envp[i][j + 1];
        n = j;
        break;
      }
    }
    if (val == NULL) {
      break;
    }
    if (strncmp(envp[i], key, n) == 0) {
      return val;
    }
  }
  return NULL;
}

課題 6

上のコード

課題 7

カレントディレクトリはプロセスごとに持っている状態である。
子プロセスから親プロセスのカレントディレクトリを変えることはできない。
変えられてしまうと、子プロセスが親プロセスを破壊できるためセキュリティ上問題となる。
そのため、プロセス自身がカレントディレクトリを変える必要がある。
もし、cdを外部プログラムとして実装しようとすると、
それは子プロセスとして生成されることになり、
親プロセスであるシェルのカレントディレクトリを変えることはできない。
もし、子プロセスでカレントディレクトリを変更しても、
それは終了次第破棄されるプロセスのカレントディレクトリなので、
目的である、シェルのカレントディレクトリの変更にはならない。
そのためシェル自身がforkせずにchdirを呼び出す必要がある。

課題 8

プロセスはそのプロセス自体のメモリ領域とは別に、OS(カーネル)がプロセス自体を管理するための
例えばプロセスIDやファイルハンドラ、状態などのメタ情報があって成立している。
プロセス自体が終了したとしても、本来は親プロセスがその終了状態がどうであったかなどを、
waitで得るために、即座にメタ状態を破棄することはできない。
そのため、プロセス自体のメモリ領域を捨てたとしても、
メタ情報は残ることになる。
waitシステムコールはこのメタ情報を読むとともに破棄して、
プロセスを完全に終了させる。
これが実行されておらず、メタ情報が消されていないのがゾンビプロセスである。
上記の通り、子プロセスを呼び出したあとwaitを呼ばないと、子プロセスが終了後にゾンビプロセスになる。
なお、親プロセスが終了した際には通常はゾンビプロセスとなった子プロセスをカーネルが消す。

ゾンビプロセスを発生させるプログラム

#include <stdio.h>
#include <unistd.h>

int main()
{
  int pid;
  if ((pid = fork()) != 0) {
    getchar();
    printf("parent: finish\n");
  } else {
    printf("child: finish\n");
  }
  return 0;
}

getcharで入力待ちの間にサブプロセス側がゾンビプロセスになります。

psの結果

$ ps u
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
ua001968 15066  0.0  0.0 112112  2088 pts/4    Ss   19:29   0:00 -bash
ua001968 15116  0.0  0.0 126248  1272 pts/4    S+   19:29   0:00 screen
ua001968 15118  0.0  0.0 108256  2428 pts/5    Ss   19:29   0:00 /bin/bash
ua001968 15143  0.0  0.0 112468  2376 pts/6    Ss   19:29   0:00 /bin/bash
ua001968 17062  0.0  0.0   3924   396 pts/6    S+   20:36   0:00 ./a.out
ua001968 17063  0.0  0.0      0     0 pts/6    Z+   20:36   0:00 [a.out] <defunct>
ua001968 17064  0.0  0.0 109696  1124 pts/5    R+   20:36   0:00 ps u

課題 9

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main()
{
  int pid;
  if ((pid = fork()) != 0) {
    printf("parent: pid = %d\n", getpid());
    sleep(1);
    printf("parent: finish\n");
  } else {
    printf("child: ppid = %d\n", getppid());
    sleep(2);
    printf("child: ppid = %d\n", getppid());
    printf("child: finish\n");
  }
  return 0;
}

実行結果

[ua001968@logex02 ex-1]$ ./a.out 
parent: pid = 17322
child: ppid = 17322
parent: finish
[ua001968@logex02 ex-1]$ child: ppid = 1
child: finish

親プロセスが消えたため、bashのプロンプトが混ざっているがそのまま載せた。

親プロセスが動いている間は、通常通りforkで生成された子プロセスのppidは
生成元のプロセスを指しているが、親プロセスが終了するとppid = 1となり、
PID = 1のプロセス、すなわち /sbin/init を指すようになる。
